{% set version = "4.14.0" %}
{% set version_major = version.split(".")[0] %}
{% set version_minor = version.split(".")[1] %}

package:
  name: ocaml
  version: {{ version }}

source:
  url: http://caml.inria.fr/pub/distrib/ocaml-{{ version_major }}.{{ version_minor }}/ocaml-{{ version }}.tar.gz
  sha256: 2df5b42d82099ad4eb1c1b9b77ab00ae52f8c19c9b20d20cefd953738ecf4586
  patches:
    - prefix_fix.diff

build:
  number: 0
  skip: true  # [win]
  run_exports:
    - {{ pin_subpackage("ocaml", max_pin="x.x.x") }}
  ignore_prefix_files:
    - bin/ocaml
    - bin/ocamldebug
    - bin/ocamldoc
    - bin/*.byte

requirements:
  build:
    - {{ compiler('c') }}
    - sysroot_linux-64=2.17  # [linux64]
    - make  # [unix]
    - m2-make  # [win]
    - posix  # [win]
  host:
  run:
    - {{ compiler('c') }}

test:
  commands:
    - ocaml -version
    - ocamlc -version
    - ocamlcmt -help
    - ocamlcp -version
    - ocamldoc -version
    - ocamldebug -version
    - ocamldep -version
    - ocamllex -version
    - ocamlmklib -version
    - ocamlmktop -version
    - ocamlobjinfo -help
    - ocamlobjinfo.byte -help
    - ocamlobjinfo.opt -help
    - ocamlopt -version
    - ocamloptp -version
    - ocamlprof -version
    - ocamlrun -version
    - ocamlyacc -version

about:
  home: https://ocaml.org
  license: LGPL-2.1-only WITH OCaml-LGPL-linking-exception
  license_family: LGPL
  license_file: LICENSE
  summary: Objective Caml (OCaml) is an implementation of the ML language.
  description: |
    OCaml is an implementation of the ML language, based on the Caml Light
    dialect extended with a complete class-based object system and a powerful
    module system in the style of Standard ML.
    OCaml comprises two compilers. One generates bytecode which is then
    interpreted by a C program. This compiler runs quickly, generates compact
    code with moderate memory requirements, and is portable to essentially any
    32 or 64 bit Unix platform. Performance of generated programs is quite good
    for a bytecoded implementation.  This compiler can be used either as a
    standalone, batch-oriented compiler that produces standalone programs, or as
    an interactive, toplevel-based system.
    The other compiler generates high-performance native code for a number of
    processors. Compilation takes longer and generates bigger code, but the
    generated programs deliver excellent performance, while retaining the
    moderate memory requirements of the bytecode compiler.
  doc_url: https://ocaml.org/docs
  dev_url: https://github.com/ocaml/ocaml

extra:
  recipe-maintainers:
    - peterjc
    - Zimmi48
    - isuruf
    - bollwyvl
