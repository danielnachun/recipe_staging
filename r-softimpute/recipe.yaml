schema_version: 1

context:
  version: 1.4-1
  posix: "'m2-' if win else ''"
  native: "'m2w64-' if win else ''"

package:
  name: r-softimpute
  version: ${{ version|replace("-", "_") }}

source:
  url:
    - ${{ cran_mirror }}/src/contrib/softImpute_${{ version }}.tar.gz
    - ${{ cran_mirror }}/src/contrib/Archive/softImpute/softImpute_${{ version }}.tar.gz
  sha256: ea4c39831dee834204f6d6594aad6b937540ba4f2adf3f37fb4546844c234aec
  file_name: softImpute_${{ version }}.tar.gz

build:
  number: 2
  merge_build_and_host_envs: ${{ true if win }}
  dynamic_linking:
    rpaths:
      - lib/R/lib/
      - lib/

requirements:
  build:
    - if: not win
      then: ${{ compiler('c') }}
    - if: not win
      then: ${{ compiler('fortran') }}
    - if: win
      then: ${{ compiler('m2w64_c') }}
    - if: win
      then: ${{ compiler('m2w64_fortran') }}
    - if: win
      then: ${{ posix }}filesystem
    - ${{ posix }}make
    - if: win
      then: ${{ posix }}sed
    - if: win
      then: ${{ posix }}coreutils
    - if: win
      then: ${{ posix }}sed
    - if: win
      then: ${{ posix }}coreutils
    - if: win
      then: ${{ posix }}zip
  host:
    - r-base=4.2
    - r-matrix
  run:
    - r-base>=4.2
    - if: win
      then: ${{ native }}gcc-libs
    - r-matrix

tests:
  - script:
      - if: not win
        then: "$R -e \"library('softImpute')\""
      - if: win
        then: "\"%R%\" -e \"library('softImpute')\""

about:
  license: GPL-2.0
  summary: |
    Iterative methods for matrix completion that use nuclear-norm regularization. There are two main approaches.The one approach uses iterative soft-thresholded svds to impute the missing values. The second approach uses alternating least squares. Both have an "EM" flavor, in that at each iteration the matrix is completed
    with the current estimate. For large matrices there is a special sparse-matrix class named "Incomplete" that efficiently handles all computations. The package includes procedures for centering and scaling rows, columns or both, and for computing low-rank SVDs on large sparse centered matrices (i.e. principal components)
  license_file: ${{ env.get("PREFIX") }}/lib/R/share/licenses/GPL-2
  homepage: https://CRAN.R-project.org/package=softImpute

extra:
  recipe-maintainers:
    - conda-forge/r
    - apcamargo

