From a5110b92f420be82e1c8af0de9e8a0b2f8fecf20 Mon Sep 17 00:00:00 2001
From: danielnachun <daniel.nachun@gmail.com>
Date: Fri, 22 Mar 2024 16:10:20 -0700
Subject: [PATCH] use numpy import

---
 qvalue/qvalue.py | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/qvalue/qvalue.py b/qvalue/qvalue.py
index 471b9b7..20794ed 100644
--- a/qvalue/qvalue.py
+++ b/qvalue/qvalue.py
@@ -1,4 +1,4 @@
-import scipy as sp
+import numpy as np
 from scipy import interpolate
 
 
@@ -36,12 +36,12 @@ def estimate(pv, m=None, verbose=False, lowmem=False, pi0=None):
     else:
         # evaluate pi0 for different lambdas
         pi0 = []
-        lam = sp.arange(0, 0.90, 0.01)
-        counts = sp.array([(pv > i).sum() for i in sp.arange(0, 0.9, 0.01)])
+        lam = np.arange(0, 0.90, 0.01)
+        counts = np.array([(pv > i).sum() for i in np.arange(0, 0.9, 0.01)])
         for l in range(len(lam)):
             pi0.append(counts[l]/(m*(1-lam[l])))
 
-        pi0 = sp.array(pi0)
+        pi0 = np.array(pi0)
 
         # fit natural cubic spline
         tck = interpolate.splrep(lam, pi0, k=3)
@@ -58,21 +58,21 @@ def estimate(pv, m=None, verbose=False, lowmem=False, pi0=None):
 
     if lowmem:
         # low memory version, only uses 1 pv and 1 qv matrices
-        qv = sp.zeros((len(pv),))
+        qv = np.zeros((len(pv),))
         last_pv = pv.argmax()
         qv[last_pv] = (pi0*pv[last_pv]*m)/float(m)
-        pv[last_pv] = -sp.inf
+        pv[last_pv] = -np.inf
         prev_qv = last_pv
         for i in range(int(len(pv))-2, -1, -1):
             cur_max = pv.argmax()
             qv_i = (pi0*m*pv[cur_max]/float(i+1))
-            pv[cur_max] = -sp.inf
+            pv[cur_max] = -np.inf
             qv_i1 = prev_qv
             qv[cur_max] = min(qv_i, qv_i1)
             prev_qv = qv[cur_max]
 
     else:
-        p_ordered = sp.argsort(pv)
+        p_ordered = np.argsort(pv)
         pv = pv[p_ordered]
         qv = pi0 * m/len(pv) * pv
         qv[-1] = min(qv[-1], 1.0)
@@ -82,7 +82,7 @@ def estimate(pv, m=None, verbose=False, lowmem=False, pi0=None):
 
         # reorder qvalues
         qv_temp = qv.copy()
-        qv = sp.zeros_like(qv)
+        qv = np.zeros_like(qv)
         qv[p_ordered] = qv_temp
 
     # reshape qvalues
-- 
2.44.0

